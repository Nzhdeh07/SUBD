CREATE TABLE STUDENTS  (
     ID NUMBER
	NAME VARCHAR
	GROUP_ID NUMBER
);


CREATE TABLE GROUPS  (
     ID NUMBER
	NAME VARCHAR
	C_VAL  NUMBER
);


CREATE OR REPLACE TRIGGER check_students_id_unique
BEFORE INSERT OR UPDATE ON STUDENTS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NOT NULL THEN
        IF (SELECT COUNT(*) FROM STUDENTS WHERE ID = :NEW.ID) > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'ID must be unique in the STUDENTS table.');
        END IF;
    END IF;
END;


CREATE OR REPLACE TRIGGER check_groups_unique
BEFORE INSERT OR UPDATE ON GROUPS
FOR EACH ROW
BEGIN
    IF :NEW.NAME IS NOT NULL THEN
        IF (SELECT COUNT(*) FROM GROUPS WHERE NAME = :NEW.NAME) > 0 THEN
            RAISE_APPLICATION_ERROR(-20002, 'NAME must be unique in the GROUPS table.');
        END IF;
    END IF;
    
    IF :NEW.ID IS NOT NULL THEN
        IF (SELECT COUNT(*) FROM GROUPS WHERE ID = :NEW.ID) > 0 THEN
            RAISE_APPLICATION_ERROR(-20003, 'ID must be unique in the GROUPS table.');
        END IF;
    END IF;
END;


CREATE SEQUENCE students_id_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE OR REPLACE TRIGGER generate_students_id
BEFORE INSERT ON STUDENTS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := students_id_seq.NEXTVAL;
    END IF;
END;



CREATE SEQUENCE groups_id_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;


CREATE OR REPLACE TRIGGER generate_groups_id
BEFORE INSERT ON GROUPS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        :NEW.ID := groups_id_seq.NEXTVAL;
    END IF;
END;